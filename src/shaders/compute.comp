#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define STIFFNESS 8.0
#define GRAVITY 9.8
#define MAXDISTANCE 15.0
#define WITHWIND 1
#define WITHGRAVITY 1
#define WITHRECOVERY 1
#define ORIENTATIONCULLING 1
#define FRUSTRUMCULLING 1
#define DISTANCECULLING 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
 	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
 	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;


bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade currentBlade = blades[gl_GlobalInvocationID.x];

    
    vec3 v0 = vec3(currentBlade.v0);
    vec3 v1 = vec3(currentBlade.v1);
    vec3 v2 = vec3(currentBlade.v2);
    vec3 up = vec3(currentBlade.up);
    float height = currentBlade.v1.w;
    vec3 oriV2 = v0 + up * height;
    
    vec3 gravity = vec3(0.0f);
    vec3 recoveryForce = vec3(0.0f);
    vec3 windForce = vec3(0.0f);

#if WITHGRAVITY
    // gravity
    vec3 gravityE = vec3(0.0f, -1.0f, 0.0f) * GRAVITY;
    vec3 dir = vec3(-cos(currentBlade.v0.w), 0.0f, sin(currentBlade.v0.w));
    vec3 gravityF = 0.25f * GRAVITY * dir;
    gravity = gravityE + gravityF;
#endif

#if WITHRECOVERY
    // recovery force
    recoveryForce = (oriV2 - v2) * STIFFNESS;
#endif

#if WITHWIND
    // wind force
    vec3 windDir = vec3(5.0f, 5.0f, 5.0f) * sin(totalTime);
    // vec3 windDir = vec3(cos(totalTime), 0, sin(totalTime)) * 10.0f;
    float fd = 1.0f - abs(dot(windDir, v2 - v0) / length(windDir) / length(v2 - v0));
    float fr = dot(v2 - v0, up) / height;
    windForce = fd * fr * windDir;
#endif

    // update v2
    vec3 deltaV2 = (gravity + recoveryForce + windForce) * deltaTime;
    v2 = v2 + deltaV2;

    // state validation
    v2 = v2 - up * min(up * (v2 - v0), 0.0f);
    float lProjection = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1.0f - lProjection / height, 0.05f * max(lProjection / height, 1.0f));
    float bladeLength = (2.0f * length(v0 - v2) + 1.0f * (length(v0 - v1) + length(v1 - v2))) / 3.0f;
    float ratio = height / bladeLength;
    vec3 v1Corr = v0 + ratio * (v1 - v0);
    vec3 v2Corr = v1Corr + ratio * (v2 - v1);

    blades[gl_GlobalInvocationID.x].v1 = vec4(v1Corr, currentBlade.v1.w);
    blades[gl_GlobalInvocationID.x].v2 = vec4(v2Corr, currentBlade.v2.w);

    
	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

#if ORIENTATIONCULLING
    // orietation culling
    vec3 cameraDirection = vec3(inverse(camera.view)[2]);
    if(abs(dot(cameraDirection, dir / length(dir))) > 0.6f)
      return;
#endif

#if FRUSTRUMCULLING
    // view-frustrum culling
    vec3 m = 0.03125f * v0 * v1 * v2;
    vec4 projV0 = camera.proj * camera.view * vec4(v0, 1.0f);
    vec4 projV2 = camera.proj * camera.view * vec4(v2, 1.0f);
    vec4 projM =  camera.proj * camera.view * vec4(m, 1.0f);

    bool v0InRange = inBounds(projV0.x, projV0.w + 0.003f) && inBounds(projV0.y, projV0.w + 0.003f) && inBounds(projV0.z, projV0.w + 0.003f);
    bool v2InRange = inBounds(projV2.x, projV2.w + 0.003f) && inBounds(projV2.y, projV2.w + 0.003f) && inBounds(projV2.z, projV2.w + 0.003f);
    bool mInRange = inBounds(projM.x, projM.w + 0.003f) && inBounds(projM.y, projM.w + 0.003f) && inBounds(projM.z, projM.w + 0.003f);

    if((!v0InRange) && (!v2InRange) && (!mInRange))
      return;
#endif

#if DISTANCECULLING
    // distance culling
    vec3 cameraPosition = vec3(inverse(camera.view)[3]);
    float projDistance = length(v0 - cameraPosition - up * dot(v0 - cameraPosition, up));
    int bucketNum = 8;
    if(gl_GlobalInvocationID.x % bucketNum > bucketNum * (1.0f - projDistance / MAXDISTANCE))
      return;
#endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];
}
