#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer Blades {
    Blade data[];
} blades;

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade data[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrustum(vec3 pos) {
    const float t = 0.01;
    vec4 p = camera.proj * camera.view * vec4(pos, 1.0);
    float h = p.w + t;
    return inBounds(p.x, h) && inBounds(p.y, h) && inBounds(p.z, h);
}

// refer to https://github.com/patriciogonzalezvivo/lygia/tree/main/generative
#define RANDOM_SCALE vec4(443.897, 441.423, .0973, .1099)
vec3 random3(vec3 p) {
    p = fract(p * RANDOM_SCALE.xyz);
    p += dot(p, p.yxz + 19.19);
    return fract((p.xxy + p.yzz) * p.zyx);
}

// refer to https://www.cg.tuwien.ac.at/research/publications/2017/JAHRMANN-2017-RRTG/JAHRMANN-2017-RRTG-draft.pdf
void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
	    numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = blades.data[gl_GlobalInvocationID.x];

    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;
    float ori = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    // gravity
    vec3 tangent = vec3(cos(ori), 0.0, sin(ori));
    vec3 front = cross(tangent, up);
    vec3 ge = vec3(0.0, -9.8, 0.0); // environmental gravity
    vec3 gf = 0.25 * length(ge) * front; // front gravity
    vec3 gravity = ge + gf;

    // recovery
    vec3 Iv2 = v0 + up * height;  // initial pose
    vec3 recovery = (Iv2 - v2) * stiffness;

    // wind
    vec3 windDir = random3(v0) * sin(totalTime);
    float fd = 1 - abs(dot(normalize(windDir), normalize(v2 - v0))); // directional alignment
    float fr = dot(v2 - v0, up) / height; // height ratio
    vec3 wind = windDir * fd * fr;

    v2 += deltaTime * (recovery + gravity + wind);

    // state validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1.0));
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + (2 - 1) * L1) / (2 + 1);
    float r = height / L;
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    // update blade buffer
    blade.v1.xyz = v1;
    blade.v2.xyz = v2;
    blades.data[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // Orientation test
    vec3 dirb = vec3(cos(ori), 0.0, sin(ori));
    if (0.9 <= abs(normalize(vec3(camera.view * vec4(dirb, 0))).z))
        return;

    // View-Frustum test
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2; // midpoint
    if (!inFrustum(v0) && !inFrustum(m) && !inFrustum(v2))
        return;

    // Distance test
    vec3 c = inverse(camera.view)[3].xyz;
    float dproj = length(v0 - c - up * dot(v0 - c, up));
    const int n = 10;
    const float dmax = 20.0;
    if ((gl_GlobalInvocationID.x % n) >= floor(n * (1 - dproj / dmax)))
        return;

    // Culling
    culledBlades.data[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
