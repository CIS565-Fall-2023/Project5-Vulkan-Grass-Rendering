#version 450
#extension GL_ARB_separate_shader_objects : enable

#define GRAVITY_MAGNITUDE	4.8
#define WIND_MAGNITUDE		1.0
#define WIND_FREQ			0.4

#define ORIENT_CULL			0
#define VIEW_FRUSTUM_CULL	0
#define DIST_CULL			0

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer GrassBlades {
	Blade grassBlades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// 3. Write the total number of blades remaining
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 2) buffer NumBlades {
   uint vertexCount;   // write the number of blades remaining here
   uint instanceCount; // = 1
   uint firstVertex;   // = 0
   uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer
	Blade currBlade = grassBlades[gl_GlobalInvocationID.x];
	vec3 v0 = currBlade.v0.xyz;
	vec3 v1 = currBlade.v1.xyz;
	vec3 v2 = currBlade.v2.xyz;
	vec3 up = currBlade.up.xyz;

	float orient = currBlade.v0.w;
	float height = currBlade.v1.w;
	float width = currBlade.v2.w;
	float stiffness = currBlade.up.w;

	/* 
	 * Gravity
	*/
	vec4 D = vec4(0.0, -1.0, 0.0, GRAVITY_MAGNITUDE);	// xyz = direction, w = magnitude of acceleration
	vec3 gE = normalize(D.xyz) * D.w; 		// environmental gravity
	vec3 t1 = normalize(vec3(-cos(orient), 0.0, sin(orient))); // dir along the blade width
	vec3 f = normalize(cross(t1, up));		// front facing dir of blade
	vec3 gF = 0.25 * length(gE) * f;		// front gravity

	vec3 totalGravity = gE + gF;

	/* 
	 * Recovery using Hooke's law
	 */
	vec3 iv2 = v0 + height * up;				// original v2 before simulation
	vec3 recoveryForce = (iv2 - v2) * stiffness;

	/* 
	 * Wind
	 */
	vec3 wind = WIND_MAGNITUDE * vec3(sin(WIND_FREQ * v0.x * totalTime), 0.0, cos(WIND_FREQ * v0.z * totalTime)); // TODO: need a helper func
	float fd = 1 - abs(dot(normalize(wind), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / height;
	vec3 windForce = wind * fd * fr;	// fd*fr = wind alignment

	vec3 totalForce = (totalGravity + recoveryForce + windForce) * deltaTime;

	/*
	 * State validation
	 */
	// ensure v2 pos always above the ground
	v2 += totalForce;
	v2 -= up * min(dot(up, v2 - v0), 0);

	// adjust v1 so blade is not stretched
	float lenProj = length(v2 - v0 - up * dot(v2-v0, up)); // length of the vector from v0 to v2 projected onto the ground plane
	v1 = v0 + height * up * max(1 - lenProj/height, 0.05 * max(lenProj/height, 1.0));

	// ensure blade length stays approximately the same
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	float L = (2 * L0 + L1) / 3.0; // degree 2 Bezier curve
	float r = height / L;
	
	v1 = v0 + r * (v1 - v0); // corrected v1 & v2 pos
	v2 = v1 + r * (v2 - v1);

	currBlade.v1.xyz = v1;
	currBlade.v2.xyz = v2;
	grassBlades[gl_GlobalInvocationID.x] = currBlade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	culledBlades[atomicAdd(numBlades.vertexCount, 1)] = grassBlades[gl_GlobalInvocationID.x];
}
