#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 0) buffer InputBlades {
    Blade blades[];
} inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade blades[];
} culledBlades;


layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool verify_frustrum(vec4 v0_proj, vec4 m_proj, vec4 v2_proj, float h_v0, float h_m, float h_v2) {
    // return true if true for any of the three vertices
    bool v0_ver = inBounds(v0_proj.x, h_v0) && inBounds(v0_proj.y, h_v0) && inBounds(v0_proj.z, h_v0);
    bool m_ver = inBounds(m_proj.x, h_m) && inBounds(m_proj.y, h_m) && inBounds(m_proj.z, h_m);
    bool v2_ver = inBounds(v2_proj.x, h_v2) && inBounds(v2_proj.y, h_v2) && inBounds(v2_proj.z, h_v2);
    return v0_ver || m_ver || v2_ver;
}

vec3 generateWind(float time, vec3 pos) {

    vec3 principalDirection = normalize(vec3(1.0, 0.0, 0.0)); 

    float magnitude = sin(time + pos.z) + 1
                    + 0.50 * sin(2.0 * (time + 2.0 * pos.z))
                    + 0.33 * sin(3.0 * (time + 3.0 * pos.z))
                    + 0.25 * sin(4.0 * (time + 4.0 * pos.z));
    float scale = 30.0;

    vec3 windVector = scale * magnitude * principalDirection;

    return windVector;
}


void main() {

	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		//numBlades.vertexCount = 0;
	}
	barrier();

	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex = 0;
        numBlades.firstInstance = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = inputBlades.blades[gl_GlobalInvocationID.x];

    vec3 v0 = blade.v0.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    // recovery force
    vec3 Iv2 = v0 + up * height;
    vec3 r = (Iv2 - v2) * stiffness;

    // gravity
    vec3 t = vec3(cos(orientation), 0, sin(orientation));
    vec3 front = normalize(cross(t, up));
    vec3 gE = -9.8 * up;
    vec3 gF = 0.25 * length(gE) * front;
    vec3 g = gE + gF;

    // wind             
    vec3 w = generateWind(totalTime, v0);
    float fd = 1 - abs(dot(normalize(w), normalize(v2 - v0)));
    float fr = dot((v2 - v0), up) / height;
    float theta = fd * fr;
    w = w * theta;

    vec3 total_displacement = (r + g + w) * 0.01;
    
    v2 += total_displacement;

    // verification
    v2 = v2 - up * min(dot(v2 - v0, up), 0.0);
    float lproj = length(v2 - v0 - dot(v2 - v0, up) * up);
    vec3 v1 = v0 + height * up * max(1.0 - lproj / height, 0.05 * max(lproj / height, 1.0));
    float L = (2 * length(v2 - v0) + length(v1 - v0) + length(v2 - v1)) / 3;

    float ratio = height / L;

    vec3 v1_ver = v0 + ratio * (v1-v0);
    vec3 v2_ver = v1_ver + ratio * (v2-v1);

    blade.v1.xyz = v1_ver;
    blade.v2.xyz = v2_ver;

    // we cull if test is false

    // orientation
    vec3 dirc = normalize((inverse(camera.view) * vec4(0, 0, 1, 0)).xyz);
    bool orientationTest = abs(dot(dirc, t)) < 0.95;

    // frustrum
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 v0_proj = camera.proj * camera.view * vec4(v0, 1);
    vec4 m_proj = camera.proj * camera.view * vec4(m, 1);
    vec4 v2_proj = camera.proj * camera.view * vec4(v2, 1);
    float tol = 0.001;
    float h_v0 = v0_proj.w + tol;
    float h_m = m_proj.w + tol;
    float h_v2 = v2_proj.w + tol;
    bool frustrum_test = verify_frustrum(v0_proj, m_proj, v2_proj, h_v0, h_m, h_v2);

    // distance
    vec3 c = (inverse(camera.view) * vec4(0, 0, 0, 1)).xyz;
    float dproj = length(v0 - c - up * dot(v0 - c, up));
    float dmax = 10.0;
    int levels = 30;
    uint id = gl_GlobalInvocationID.x;
    bool distance_test = id % levels >= floor(levels * (1 - dproj / dmax));

    // cull
    bool cull = !orientationTest || !frustrum_test || !distance_test;
    if (!cull) {
        uint index = atomicAdd(numBlades.vertexCount, 1);
        culledBlades.blades[index] = blade;
    }

    //culledBlades.blades[gl_GlobalInvocationID.x] = blade;

}
