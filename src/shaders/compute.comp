#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI_OVER_FOUR 0.785398163f

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define APPLY_FORCES 1
#define APPLY_RECOVERY 1
#define APPLY_GRAVITY 1
#define APPLY_WIND 1

const vec3 gE = vec3(0, -3, 0);
const vec3 windNoiseMoveDirection = normalize(vec3(2, 0.2, 1)) * 0.7;

#define DO_CULLING 1
#define DO_ORIENTATION_CULLING 1
#define DO_FRUSTUM_CULLING 1
#define DO_DISTANCE_CULLING 1

#define ORIENTATION_CULLING_THRESHOLD 0.9
#define FRUSTUM_CULLING_TOLERANCE 0.2
#define DISTANCE_CULLING_DIST_MAX 60
#define DISTANCE_CULLING_NUM_BUCKETS 8

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
    mat4 invView;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // accumulate num blades remaining
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

vec4 random4(vec4 p) {
    return fract(sin(vec4(dot(p, vec4(127.1, 311.7, 921.5, 465.8)),
                          dot(p, vec4(269.5, 183.3, 752.4, 429.1)),
                          dot(p, vec4(420.6, 631.2, 294.3, 910.8)),
                          dot(p, vec4(213.7, 808.1, 126.8, 572.0))
                    )) * 43758.5453);
}

float surflet(vec4 p, vec4 gridPoint) {
    vec4 t2 = abs(p - gridPoint);
    vec4 t = vec4(1.f) - 6.f * pow(t2, vec4(5.f)) + 15.f * pow(t2, vec4(4.f)) - 10.f * pow(t2, vec4(3.f));
    vec4 gradient = random4(gridPoint) * 2 - vec4(1);
    vec4 diff = p - gridPoint;
    float height = dot(diff, gradient);
    return height * t.x * t.y * t.z * t.w;
}

float perlin(vec4 p) {
    float surfletSum = 0.f;
    for (int dx = 0; dx <= 1; ++dx) {
        for (int dy = 0; dy <= 1; ++dy) {
            for (int dz = 0; dz <= 1; ++dz) {
                for (int dw = 0; dw <= 1; ++dw) {
                    surfletSum += surflet(p, floor(p) + vec4(dx, dy, dz, dw));
                }
            }
        }
    }
    return surfletSum;
}

bool isInBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool isPointInsideFrustum(vec3 p) {
    vec4 p_ = camera.proj * camera.view * vec4(p, 1);
    float h = p_.w + FRUSTUM_CULLING_TOLERANCE;
    return isInBounds(p_.x, h) && isInBounds(p_.y, h) && isInBounds(p_.z, h);
}

void main() {
    const uint bladeIdx = gl_GlobalInvocationID.x;
    
    if (bladeIdx == 0) {
        numBlades.vertexCount = 0;
    }
    barrier();

    Blade thisBlade = blades[bladeIdx];

    vec3 v0 = thisBlade.v0.xyz;
    vec3 v1 = thisBlade.v1.xyz;
    vec3 v2 = thisBlade.v2.xyz;
    const vec3 up = thisBlade.up.xyz;

    const float theta = thisBlade.v0.w;
    const float h = thisBlade.v1.w;
    const float stiffness = thisBlade.up.w;

    // -------------------------
    // FORCES
    // -------------------------

#if APPLY_RECOVERY
    vec3 Iv2 = v0 + h * up;
    vec3 Fr = (Iv2 - v2) * stiffness;
#else
    vec3 Fr = vec3(0);
#endif

#if APPLY_GRAVITY
    vec3 f = vec3(cos(theta + PI_OVER_FOUR), 0, sin(theta + PI_OVER_FOUR));
    vec3 gF = 0.25 * length(gE) * f;
    vec3 Fg = gE + gF;
#else
    vec3 Fg = vec3(0);
#endif

#if APPLY_WIND
    vec3 Fw = vec3(
        perlin(vec4(v2 * 0.4 + windNoiseMoveDirection * totalTime, totalTime * 0.3)), 
        0, 
        perlin(vec4((v2 * 0.4 + vec3(493.12, 210.03, 974.54)) + windNoiseMoveDirection * totalTime, totalTime * 0.3))
    ) * 10;
#else
    vec3 Fw = vec3(0);
#endif

    vec3 delta = (Fr + Fg + Fw) * deltaTime;

    v2 += delta;
    v2 = v2 - up * min(up * (v2 - v0), 0);
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + h * up * max(1 - lProj / h, 0.05 * max(lProj / h, 1));

    float L0 = distance(v0, v2);
    float L1 = distance(v0, v1) + distance(v1, v2);
    // int n = 3;
    // float L = (2 * L0 + (n - 1) * L1) / (n + 1);
    float L = (L0 + L1) * 0.5;

    float r = h / L;
    vec3 v1_corr = v0 + r * (v1 - v0);
    vec3 v2_corr = v1_corr + r * (v2 - v1);

#if APPLY_FORCES
    thisBlade.v1.xyz = v1_corr.xyz;
    thisBlade.v2.xyz = v2_corr.xyz;
    blades[bladeIdx] = thisBlade;
#endif

    // -------------------------
    // CULLING
    // -------------------------

#if DO_CULLING
#if DO_ORIENTATION_CULLING
    const vec3 dir_c = vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
    vec3 dir_b = vec3(cos(theta), 0, sin(theta));
    if (abs(dot(dir_c, dir_b)) > ORIENTATION_CULLING_THRESHOLD) {
        return;
    }
#endif

#if DO_FRUSTUM_CULLING
    vec3 m = mix(mix(v0, v1, 0.5), mix(v1, v2, 0.5), 0.5); // midpoint of curve
    if (!isPointInsideFrustum(v0) && !isPointInsideFrustum(m) && !isPointInsideFrustum(v2)) {
        return;
    }
#endif

#if DO_DISTANCE_CULLING
    const vec3 c = camera.invView[3].xyz;
    float d_proj = length(v0 - c - up * dot(v0 - c, up));

    float d_max = DISTANCE_CULLING_DIST_MAX;
    int n = DISTANCE_CULLING_NUM_BUCKETS;

    if (bladeIdx % n > floor(n * (1 - d_proj / d_max))) {
        return;
    }
#endif
#endif

    const uint culledIdx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[culledIdx] = thisBlade;
}
