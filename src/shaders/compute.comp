#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define ORIENT_CULL 1
#define VIEW_FRUST_CULL 1
#define VF_T 0.01
#define DIST_CULL 1
#define DIST_MAX 40.f
#define DIST_BUCKETS 20

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer

    Blade currBlade = blades[gl_GlobalInvocationID.x];

    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;
    float orient = currBlade.v0.w;
    float height = currBlade.v1.w;
    float width = currBlade.v2.w;
    float stiff = currBlade.up.w;

    //gravity
    vec3 gE = vec3(0, -1.f, 0) * 2.f;
    vec3 f = vec3(cos(orient), 0, sin(orient));
    vec3 gF = 0.25 * length(gE) * f;
    vec3 g = gE + gF;

    //recovery
    vec3 iv2 = v0 + height * up;
    vec3 r = (iv2 - v2) * stiff;

    //wind with random 2d wind fn
    vec3 wind_dir = normalize(vec3(1, 0, 1));
    float wind_mag = cos(totalTime + 0.3 * v2.x) + sin(totalTime + 0.3 * v2.y);
    vec3 wi = wind_dir * wind_mag;
    float fd = 1 - abs(dot(normalize(wi), normalize(v2-v0)));
    float fr = dot(v2-v0, up) / height;
    float theta = fd * fr;
    vec3 w = wi * theta;

    v2 = v2 + (g + r + w) * deltaTime;

    //state val
    v2 = v2 - up * min(dot(up, v2-v0), 0);
    float lproj = length(v2 - v0 - up*dot(v2-v0, up));
    v1 = v0 + height * up * max(1 - lproj/height, 0.05 * max(lproj/height, 1));
    float L = (2.f * length(v2-v0) + length(v2-v1) + length(v1-v0))/3.f;
    float ratio = height/L;
    v1 = v0 + ratio*(v1-v0);
    v2 = v1 + ratio*(v2-v1);
    currBlade.v1.xyz = v1.xyz;
    currBlade.v2.xyz = v2.xyz;
    blades[gl_GlobalInvocationID.x] = currBlade;


	// Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
    #if ORIENT_CULL
    vec3 dirc = inverse(camera.view)[2].xyz;
    if (abs(dot(dirc, f)) > 0.9) {
        return;
    }
    #endif

    #if VIEW_FRUST_CULL
    vec3 mdpt = 0.25*v0 + 0.5*v1 + 0.25*v2;
    mat4 VP = camera.proj * camera.view;
    vec4 pv0 = VP * vec4(v0, 1.f);
    vec4 pv2 = VP * vec4(v2, 1.f);
    vec4 pm = VP * vec4(mdpt, 1.f);

    if (!(inBounds(pv0.x, pv0.w+VF_T) && inBounds(pv0.y, pv0.w+VF_T) && inBounds(pv0.z, pv0.w+VF_T)) && 
        !(inBounds(pv2.x, pv2.w+VF_T) && inBounds(pv2.y, pv2.w+VF_T) && inBounds(pv2.z, pv2.w+VF_T)) &&
        !(inBounds(pm.x, pm.w+VF_T) && inBounds(pm.y, pm.w+VF_T) && inBounds(pm.z, pm.w+VF_T))) {
        return;
    }
    #endif

    #if DIST_CULL
    vec3 cam_pos = inverse(camera.view)[3].xyz;
    float dproj = length(v0 - cam_pos - up * dot(v0-cam_pos, up));
    if (mod(gl_GlobalInvocationID.x, DIST_BUCKETS) > floor(DIST_BUCKETS * (1 - dproj/DIST_MAX))) {
        return;
    }
    #endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];
}
