#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

#define WORKGROUP_SIZE 32
#define TOLERANCE 0.01f;

vec4 D=vec4(0.0f,-1.0f,0.0f,9.8f);
vec3 WIND_DIRECTION=vec3(-0.9f,0.0f,0.0f);
float WIND_WAVE_FREQUENCY=1.0f;
float WIND_MAGNIFIER=5.0f;
float DISTANCE_MAX_CULL=15.0f;
float DISTANCE_NUM_CULL=15;
float GRASS_MASS=0.9f;
float COLLISIONSTRENGTH=0.9f;

bool orientationcull=true;
bool frustumcull=true;
bool distancecull=true;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
	Blade in_blades[];
} blades;

layout(set = 2, binding = 1) buffer culledBlades {
	Blade in_blades[];
} cblades;

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   
    uint instanceCount; 
    uint firstVertex;   
    uint firstInstance; 
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 wind(vec3 invec,float time){
    float mag=sin(mod(time*WIND_WAVE_FREQUENCY,6.28f))+1.0f;
    return mag*WIND_MAGNIFIER*WIND_DIRECTION;
    //return vec3(0.0f);
}

bool inFrustum(vec3 in_p) {
    vec4 p= camera.proj * camera.view * vec4(in_p, 1.0f);
    float h = p.w + TOLERANCE;
    return inBounds(p.x, h)&&inBounds(p.y, h)&&inBounds(p.z, h);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = blades.in_blades[gl_GlobalInvocationID.x];

    vec3 v0=blade.v0.xyz;
    vec3 v1=blade.v1.xyz;
    vec3 v2=blade.v2.xyz;
    vec3 up=blade.up.xyz;
    float orit = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;
    vec3 f=normalize(cross(vec3(cos(orit), 0, sin(orit)), up));

    // TODO: Apply forces on every blade and update the vertices in the buffer
    // gravity
    vec3 gE = GRASS_MASS*normalize(D.xyz) * D.w;
    vec3 gF = 0.25f * length(gE) * f;
    vec3 gravity = gE + gF;

    // recovery
    vec3 iv2 = v0 + up * height;
    vec3 recovery = (iv2 - v2) * stiffness*COLLISIONSTRENGTH;

    // wind
    vec3 winddir=wind(v0,totalTime);
    float f_d=1.0f-abs(dot(normalize(winddir),normalize(v2-v0)));
    float f_r=dot(v2-v0,up)/height;
    float theta=f_d*f_r;
    vec3 windforce=winddir*theta;

    // total force
    vec3 tv2 = (gravity+recovery+windforce) * deltaTime;
    //vec3 tv2=vec3(0.0f);
    v2 += tv2;
    v2 = v2-up*min(dot(up,v2-v0),0.0f);
    //blades.in_blades[gl_GlobalInvocationID.x].v2.xyz=v2.xyz;

    // state validation
    float l_proj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1= v0+height*up*max(1.0f-l_proj/height,0.05f*max(l_proj/height,1.0f));

    float L1 = length(v2-v0);
    float L0 = length(v2-v1)+length(v1-v0);
    float n = 2;
    float L = (2*L0+(n-1)*L1)/(n+1);
    float r =height/L;
    
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);
    blades.in_blades[gl_GlobalInvocationID.x].v1.xyz=v1.xyz;
    blades.in_blades[gl_GlobalInvocationID.x].v2.xyz=v2.xyz;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer

    mat4 inverseview=inverse(camera.view);
    vec3 cpos=vec3(inverseview[3][0],inverseview[3][1],inverseview[3][2]);
    
    if(orientationcull){
        vec3 dir_c=cpos-v0;
        vec3 dir_b = vec3(cos(orit), 0.f, sin(orit));
        if(abs(dot(normalize(dir_c), normalize(dir_b))) >=0.9f)
            return;
    }
    
    
    if(frustumcull){
        if(!inFrustum(v0)||!inFrustum(v1)||!inFrustum(v2))
            return;
    }
    
    if(distancecull){
        float d_proj = length(v0 - cpos - up * dot((v0-cpos), up));
        if(mod(gl_GlobalInvocationID.x,DISTANCE_NUM_CULL)<=floor(DISTANCE_NUM_CULL*(1.0f,d_proj/DISTANCE_MAX_CULL)))
            return;
    }

    
    
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    cblades.in_blades[atomicAdd(numBlades.vertexCount, 1)] = blades.in_blades[gl_GlobalInvocationID.x];
}
