#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define ADD_FORCE 1
#define ORIENTATION_CULLING 1
#define FRUSTUM_CULLING 0
#define DISTANCE_CULLING 1
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining
layout(set = 2, binding = 0) buffer  Blades {
     Blade blades[];
};

layout(set = 2, binding = 1) buffer  CulledBlades {
     Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool frustumTest(vec4 p) {
    float bound = p.w + 0.1;
    return inBounds(p.x, bound) && inBounds(p.y, bound) && inBounds(p.z, bound);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade b = blades[gl_GlobalInvocationID.x];
    vec3 v0 = b.v0.xyz;
    vec3 v1 = b.v1.xyz;
    vec3 v2 = b.v2.xyz;
    float h = b.v1.w;
    float width = b.v2.w;
    
    // TODO: Apply forces on every blade and update the vertices in the buffer

    // Gravity
	vec3 gE = vec3(0.0, -1.0, 0.0) * 10.0;
    vec3 up = b.up.xyz;
    vec3 tangent = normalize(vec3(cos(b.v0.w), 0, sin(b.v0.w)));
	vec3 f = normalize(cross(up, tangent));
	vec3 gF = 0.25 * length(gE) * f;
	vec3 g = gE + gF;

	// Recovery
	vec3 iv2 = v0 + h * up;
    float stiffness = b.up.w;
	vec3 r = (iv2 - v2) * stiffness;

	// Wind
	vec3 wi = vec3(sin(totalTime), 0.0, sin(totalTime + 0.5)) * 2.0;
	float fd = 1.0 - abs(dot(normalize(wi), normalize(v2 - v0)));
	float fr = dot((v2 - v0), up) / h;
	float alignment = fd * fr;
	vec3 w = wi * alignment;

#if ADD_FORCE
    v2 += (g + r + w) * deltaTime;
#endif

    // State Validation
    v2 -= up * min(dot(up, v2 - v0), 0);
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + h * up * max(1 - lProj / h, 0.05 * max(lProj/h, 1));

    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + L1) / 3;
    float ratio = h / L;
    vec3 v1cor = v0 + ratio * (v1 - v0);
    vec3 v2cor = v1cor + ratio * (v2 - v1);

    b.v1.xyz = v1cor;
    b.v2.xyz = v2cor;
    blades[gl_GlobalInvocationID.x] = b;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

#if ORIENTATION_CULLING
	vec3 view = normalize(vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]));
	float t = dot(view, f);
	if(abs(t) < 0.1){
		return;
	}
#endif

#if FRUSTUM_CULLING
	mat4 viewProj = camera.proj * camera.view;
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
	vec4 v0_t = viewProj * vec4(v0, 1.0);
	vec4 v2_t = viewProj * vec4(v2, 1.0);
	vec4 m_t = viewProj * vec4(m, 1.0);
	if (!frustumTest(v0_t) || !frustumTest(v2_t) || !frustumTest(m_t)) {
        return;
    }
#endif

#if DISTANCE_CULLING
	vec3 camPos = vec3(inverse(camera.view) * vec4(0.0, 0.0, 0.0, 1.0));
	float dproj = length(v0 - camPos - up * (dot(v0 - camPos, up)));
	if(mod(gl_GlobalInvocationID.x, 10) > (10 * (1.0 - dproj / 30))){
		return;
	}
#endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = b;
}
