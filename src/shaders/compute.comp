#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
	vec4 fwd;
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];	
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}
// v0: the position of the grass blade on the geomtry
// v1: a Bezier curve guide that is always "above" v0 with respect to the grass blade's up vector (explained soon)
// v2: a physical guide for which we simulate forces on
// v0.w holds orientation, v1.w holds height, v2.w holds width, and up.w holds the stiffness coefficient.
bool orientationTest(Blade blade){
	float orientation = blade.v0.w;
	vec3 dirB = vec3(sin(orientation), 0, cos(orientation));
	return abs(dot(dirB,camera.fwd.xyz)) < 0.9;
}

void main() {
	// Reset the number of blades to 0
	uint threadInOneGroup = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	uint groupOffset = 
		gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupID.z
		+ gl_NumWorkGroups.x * gl_WorkGroupID.y
		+ gl_WorkGroupID.x;
	uint idx = gl_LocalInvocationIndex + groupOffset * threadInOneGroup;
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	Blade currentBlade = blades[idx];
	bool culled = !orientationTest(currentBlade);

	if(!culled){
		uint dstIdx = atomicAdd(numBlades.vertexCount,1);
		culledBlades[dstIdx] = currentBlade; 
	}
}
