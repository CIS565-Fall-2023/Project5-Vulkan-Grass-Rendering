#version 450
#extension GL_ARB_separate_shader_objects : enable

#define frustumCullTolerance 0.05

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool frustumTest(vec3 p) {
    vec4 vpp = camera.proj * camera.view * vec4(p, 1.0);
    float h = vpp.w + frustumCullTolerance;

    return inBounds(vpp.x, h) && inBounds(vpp.y, h);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer
	Blade blade = blades[gl_GlobalInvocationID.x];
	vec3 up = blade.up.xyz;
	vec3 v0 = blade.v0.xyz;
  	vec3 v1 = blade.v1.xyz;
  	vec3 v2 = blade.v2.xyz;

	float orientation = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
  	float stiffness = blade.up.w;

	// gravity
	vec3 ge = vec3(0.0, -9.8, 0.0);
	vec3 tangent = vec3(cos(orientation), 0.0, sin(orientation));
	vec3 f = cross(up, tangent);
	vec3 gf = 0.25 * length(ge) * f;
	vec3 gravity = ge + gf;

	// Recovery 
	vec3 iv2 = v0 + up * height;
	vec3 recovery = (iv2 - v2) * stiffness;

	// Wind
	vec3 wind_func = vec3(1.f, 0.f, 0.f) * sin(totalTime) * 3.f;
	float fd = 1 - abs(dot(normalize(wind_func), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / height;
	vec3 wind = wind_func * fd * fr;

	// update
	v2 += deltaTime * (recovery + gravity + wind);

	// state validation
	// v2 has to remain above the local plane
    v2 = v2 - up * min(up * (v2 - v0), 0);

	// ensure that the blade of grass always has at least a slight curvature
	float lproj = length(v2 - v0 - up * ((v2 - v0) * up));
	v1 = v0 + height * up * max(1.f - (lproj / height), 0.05f * max(lproj / height, 1.f));

	// ensure that the length of the Bezier curve is not larger than the height of the blade
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	int n = 2;
	float L = (2.0 * L0 + (n - 1) * L1) / (n + 1);
	float ratio = height / L;
  	
	v1 = v0 + ratio*(v1 - v0);
    v2 = v1 + ratio*(v2 - v1);

	blades[gl_GlobalInvocationID.x].v1.xyz = v1.xyz;
    blades[gl_GlobalInvocationID.x].v2.xyz = v2.xyz;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer

	vec3 camPos = inverse(camera.view)[3].xyz;
	if (dot(tangent, normalize(v0 - camPos)) > 0.9) {
		return;
	}

	// View-frustum culling
	vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
	if (!frustumTest(m) && !frustumTest(v0) && !frustumTest(v2)) {
		return;
	}

	// Distance culling
	float dproj = length(v0 - camPos - up * dot(v0 - camPos, up));
	int level = 10;
	float dmax = 20.0;
	if (gl_GlobalInvocationID.x % level < int(floor(level * (1.0 - (dproj / dmax)))))
	{
		return;
	}



	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
