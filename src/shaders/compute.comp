#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

// test variables
#define orientation_test_threshold 0.6
#define view_frustum_test_tolerance 0.7
#define distance_test_n 32
#define distance_test_dmax 4.0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Add bindings to:

// 1. Store the input blades
layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// 3. Write the total number of blades remaining
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inViewFrustum(mat4 VP, vec3 p) {
    vec4 p_prime = VP * vec4(p, 1.0f);
    float h = p_prime.w + view_frustum_test_tolerance;
    return inBounds(p_prime.x, h) && inBounds(p_prime.y, h) && inBounds(p_prime.z, h);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Extract value
    Blade blade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = vec3(blade.v0);
    vec3 v1 = vec3(blade.v1);
    vec3 v2 = vec3(blade.v2);
    vec3 up = vec3(blade.up);

    float orientation = blade.v0.w;
    float height =      blade.v1.w;
    float width =       blade.v2.w;
    float stiffness =   blade.up.w;

    vec3 t1 = vec3(sin(orientation), 0, cos(orientation));

    // Apply forces on every blade and update the vertices in the buffer

    // Gravity
    vec4 D = vec4(0.0f, -1.0f, 0.0f, 9.8f);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 f = normalize(cross(t1, up));
    vec3 gF = 0.25f * length(gE) * f;
    vec3 g = gE + gF;

    // Recovery
    vec3 iv2 = v0 + up * height;
    vec3 r = (iv2 - v2) * stiffness;

    // Wind
    vec3 wi = vec3(0.5 * sin(totalTime), 0.0f, 0.5 * sin(totalTime));
    float fd = 1.0f - abs(dot(normalize(wi), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    float theta = fd * fr;
    vec3 w = wi * theta;

    // Determine final position for total force
    vec3 tv2 = (g + r + w) * deltaTime;
    v2 += tv2;
    
    // State validation
    v2 -= up * min(dot(up, v2 - v0), 0.0f);
    float lproj = length(v2 - v0 - up * dot(up, v2 - v0));
    v1 = v0 + up * height * max(1.0f - lproj / height, 0.05f * max(lproj / height, 1.0f));

    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);
    float L = (2.0f * L0 + L1) / 3.0f;

    float ratio = height / L;
    vec3 v1corr = v0 + ratio * (v1 - v0);
    vec3 v2corr = v1corr + ratio * (v2 - v1);

    v1 = v1corr;
    v2 = v2corr;
    blade.v1 = vec4(v1, height);
    blade.v2 = vec4(v2, width);
    blades[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // Orientation test
    vec3 dirb = t1; // vector along the width of the blade
    vec3 dirc = vec3(normalize(camera.view * vec4(0, 0, 1, 0)));// view direction
    if (abs(dot(dirc, dirb)) < orientation_test_threshold) {
        return;
    }

    // View-frustum test
    mat4 VP = camera.proj * camera.view;
    vec3 midpoint = 0.25f * v0 + 0.5f * v1 + 0.25f * v2;
    if (!inViewFrustum(VP, v0) || !inViewFrustum(VP, midpoint) || !inViewFrustum(VP, v2)) {
		return;
	}

    // Distance test
    vec3 c = vec3(inverse(camera.view) * vec4(0, 0, 0, 1)); // position of camera
    float dproj = length(v0 - c - up * (v0 - c) * up);
    if ((gl_GlobalInvocationID.x % distance_test_n) < floor(distance_test_n * (1.0f - dproj / distance_test_dmax))) {
        return;
    }

    // Occlusion test
    // TODO: Implement this test

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];
}
