#version 450
#extension GL_ARB_separate_shader_objects : enable

#define stiffness 2.0
#define GravityDirection vec4(0, -1, 0, 2)
#define tolerance 0.5
#define Max_DisCull 30

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in; //each workgroup process 32 becuase wrap size

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

 layout(set = 2, binding = 0) buffer TotalBlades {
    Blade totalBlades[];
 }  ;

  layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledblades[];
 }  ;

 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool isPointInsideViewFrustum(vec3 point) {
    vec4 transformedPoint = camera.proj * camera.view * vec4(point, 1.0);
    float boundary = transformedPoint.w + tolerance;

    // Check if point's x, y, and z components are within the boundary
    return (transformedPoint.x >= -boundary && transformedPoint.x <= boundary) &&
           (transformedPoint.y >= -boundary && transformedPoint.y <= boundary) &&
           (transformedPoint.z >= -boundary && transformedPoint.z <= boundary);
}


void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
        numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade currentBlade = totalBlades[gl_GlobalInvocationID.x];
    vec4 v0t = currentBlade.v0;
    vec4 v1t = currentBlade.v1;
    vec4 v2t = currentBlade.v2;
    vec4 upt = currentBlade.up;

    vec3 v0 = vec3(currentBlade.v0);
    vec3 v1 = vec3(currentBlade.v1);
    vec3 v2 = vec3(currentBlade.v2);
    vec3 up = vec3(currentBlade.up);

    float direction = currentBlade.v0.w;
    float h = v1t.w;
    vec3 cameraPos = vec3(inverse(camera.view)[3]); 

    // TODO: Apply forces on every blade and update the vertices in the buffer
    //Gravity
    
    vec3 gE = normalize(GravityDirection.xyz) * GravityDirection.w;
    vec3 FrontDir = length(gE) * normalize(cross(vec3(cos(direction), 0, sin(direction)), up)); 
    vec3 gF = 1 / 4 * length(gE) * FrontDir;
    vec3 gravity = gE + gF;

    //Recovery
    vec3 Recovery = (v0 + up * h - v2) * stiffness;

    //Wind
    vec3 w = normalize(vec3(cos(totalTime + cos(v0.x + v0.z)), 0.0, sin(totalTime + cos(v0.x + v0.z))));
    float DirAlignment = 1 - abs(dot(normalize(w), normalize(v2-v0)));
    float HeightRatio = dot(v2 - v0, up) / h;
    vec3 wind = w * DirAlignment * HeightRatio;

    //Total Force
    v2 += (gravity + Recovery + wind) * deltaTime;
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
    float Lproj = length(v2 - v0 - up * dot(v2-v0, up));

    v1 = v0 + h * up * max(1 - Lproj / h, 0.05 * max(Lproj / h, 1.0));

    float n = 2.0;
    float L = (2 * distance(v2, v0) + (n - 1) * (distance(v0, v1) + distance(v1, v2))) / (n + 1);
    float r = h / L;

    vec3 v1corr = v0 + r * (v1 - v0);
    vec3 v2corr = v1 + r * (v2 - v1);

    totalBlades[gl_GlobalInvocationID.x].v1 = vec4(v1corr, h);
    totalBlades[gl_GlobalInvocationID.x].v2 = vec4(v2corr, v2t[3]);


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    //Orientation Culling
    vec3 viewDir = normalize(v0 - cameraPos);
    if (abs(dot(viewDir, FrontDir)) > 0.9) {
        return;
    }


    //View-frustum Culling
    vec3 m = 1 / 4 * v0 * 1 / 2 * v1 * 1 / 4 * v2;
    if (!isPointInsideViewFrustum(v0) && !isPointInsideViewFrustum(v1) && !isPointInsideViewFrustum(m)) {
        return;
    }

    
    //Distance Culling
    vec3 voc = vec3(v0t) - cameraPos;
    float dProj = length(voc - dot(voc, up) * up);

    uint init = 10; 
    if (mod(gl_GlobalInvocationID.x, init) >= (init * (1 - dProj / Max_DisCull))) {
        return;
    }

    
    culledblades[atomicAdd(numBlades.vertexCount, 1)] = totalBlades[gl_GlobalInvocationID.x];
}