#version 450
#extension GL_ARB_separate_shader_objects : enable

#define NUM_BLADES 8192

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// DONE: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

layout(set = 2, binding = 1) buffer Blades {
    Blade[NUM_BLADES] blades;
} blades;

layout(set = 2, binding = 2) buffer CulledBlades {
    Blade[NUM_BLADES] blades;
} culledBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex = 0;
        numBlades.firstInstance = 0;
	}
	barrier(); // Wait till all threads reach this point

    // DONE: Apply forces on every blade and update the vertices in the buffer

    Blade currBlade = blades.blades[gl_GlobalInvocationID.x];
    vec3 bitangent = vec3(cos(currBlade.v0.w), 0, sin(currBlade.v0.w));
    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;
    float height = currBlade.v1.w;

    const float gravity = 0.98;
    // const vec3 windForce = 4.0 * normalize(vec3(0.5, 0.2, 0.5));
    vec3 windForce = vec3(2 * sin(totalTime), 0, sin(totalTime * 1.5 + 0.2));

    vec3 ge = vec3(0, 1, 0) * gravity;
    vec3 gf = 0.25 * bitangent * length(ge);
    vec3 g = ge + gf;
    vec3 r = (v1 - v2) * currBlade.up.w;
    float alignment = 1 - abs(dot(normalize(windForce), normalize(v2 - v0)));
    float heightRatio = dot(v2 - v0, up) / height;
    vec3 w = windForce * alignment * heightRatio;
    vec3 force = g + r + w;

    v2 = v2+ force * deltaTime;
    float projLen = length(v2 - v0 - up * dot(v2-v0, up));
    v1 = v0 + up * height * max(1 - projLen / height, 0.05 * max(projLen / height, 1));
    float L = (2 * length(v2 - v0) + length(v1 - v0) + length(v2 - v1)) / 3;
    float ratio = height / L;
    v1 = v0 + ratio * (v1 - v0);
    v2 = v1 + ratio * (v2 - v1);

    currBlade.v1.xyz = v1;
    currBlade.v2.xyz = v2;
    blades.blades[gl_GlobalInvocationID.x] = currBlade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    vec3 viewForward = vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
    bool cullTest = true;

    
    // vec3 tangent = normalize(v1 - v0);
    // vec3 normal = normalize(cross(tangent, bitangent));

    // 1.orientation test
    if(abs(dot(normalize(bitangent.xz), normalize(viewForward.xz))) > 0.9){
        cullTest = false;
    }else{
        // 2.view frustrum test
        vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
        mat4 vp = camera.proj * camera.view;
        vec4 v0_p = vp * vec4(v0, 1);
        vec4 m_p = vp * vec4(m, 1);
        vec4 v2_p = vp * vec4(v2, 1);
        float tol = 0.01;
        float h0 = v0_p.w + tol;
        float hm = m_p.w + tol;
        float h2 = v2_p.w + tol;
        if(!(
            ((inBounds(v0_p.x, h0) && inBounds(v0_p.y, h0) && inBounds(v0_p.z, h0)))
            || ((inBounds(m_p.x, hm) && inBounds(m_p.y, hm) && inBounds(m_p.z, hm)))
            || ((inBounds(v2_p.x, h2) && inBounds(v2_p.y, h2) && inBounds(v2_p.z, h2)))
        )){
            cullTest = false;
        }else{
            // 3.Distance test
            vec3 cam = -vec3(camera.view[3][0], camera.view[3][1], camera.view[3][2]);
            float d_proj = length(v0 - cam - up * dot((v0 - cam), up));
            float d_max = 25;
            uint n = 10;
            int level = int(floor(n * (1.0 - d_proj / d_max)));
            if(int(gl_GlobalInvocationID.x % n) > level){
                cullTest = false;
            }
        }
    }
    
    if(cullTest){
        uint oriVertexCount = atomicAdd(numBlades.vertexCount, 1);
        culledBlades.blades[oriVertexCount] = currBlade;
    }
    
}
