#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// DONE: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// 3. Write the total number of blades remaining
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrustum(vec3 p) {
    vec4 p_prime = camera.proj * camera.view * vec4(p, 1.0);
    float h = p_prime.w + 0.2;
    return inBounds(p_prime.x, h) && inBounds(p_prime.y, h) && inBounds(p_prime.z, h);
}

#define GRAVITY 1
#define RECOVERY 1
#define WIND 1
#define ORIENTATION_CULLING 1
#define VIEW_FRUSTUM_CULLLING 1
#define DISTANCE_CULLING 1

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // DONE: Apply forces on every blade and update the vertices in the buffer
    Blade blade = inputBlades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;
    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;
    vec3 direction = vec3(cos(orientation), 0.0, sin(orientation));

    vec3 totalForce = vec3(0.0);
#if GRAVITY
    vec3 gE = vec3(0.0, -9.8, 0.0);
    vec3 gF = 0.25 * 9.8 * normalize(cross(direction, up));
    totalForce += (gE + gF);
#endif
#if RECOVERY
    vec3 re = (v0 + up * height - v2) * stiffness;
    totalForce += re;
#endif
#if WIND
    vec3 wi = normalize(vec3(cos(3.14 * totalTime) + sin(2.71 * totalTime), 0.0, cos(2.71 * totalTime) + sin(3.14 * totalTime))) * length(v0);
    float fd = 1 - abs(dot(normalize(wi), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    vec3 w = wi * fd * fr;
    totalForce += w;
#endif

    v2 += totalForce * deltaTime;
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
    float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - l_proj / height, 0.05 * max(l_proj / height, 1.0));
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v0) + length(v1 - v0);
    float L = (L0 + L1) / 2;
    float r = height / L;
    vec3 v1corr = v0 + r * (v1 - v0);
    vec3 v2corr = v1corr + r * (v2 - v1);

    blade.v1.xyz = v1corr;
    blade.v2.xyz = v2corr;
    inputBlades[gl_GlobalInvocationID.x] = blade;

	// DONE: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    vec3 camPos = inverse(camera.view)[3].xyz;
#if ORIENTATION_CULLING
    vec3 directionCam = camPos - v0;
    if(abs(dot(normalize(directionCam), direction)) > 0.9) return;
#endif
#if VIEW_FRUSTUM_CULLLING
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    if(!inFrustum(v0) && !inFrustum(v2) && !inFrustum(m)) return;
#endif
#if DISTANCE_CULLING
    float d_proj = length(v0 - camPos - up * dot(v0 - camPos, up));
    if(mod(gl_GlobalInvocationID.x, 10) >= floor(10 * (1 - d_proj / 50.0))) return;
#endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
